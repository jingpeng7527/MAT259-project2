/* autogenerated by Processing revision 1293 on 2024-02-19 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;
import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class project2_jingpeng extends PApplet {

/*************************************************************************************
Mat 259 Project 2 3D Visualization: "Mental Health from Checkouts over time"               
Tested in Processing 4                                  
                                                     
Author: Jing Peng                       
Supervisor: George Legrady                           

Purpose: Show how to present volume data in a basic 3D environment     

Usage: 1. A mouse left-drag will rotate the camera around the subject.
          2. A right drag will zoom in and out. 
          3. A middle-drag (command-left-drag on mac) will pan. 
          4. A double-click restores the camera to its original position. 
          5. The shift key constrains rotation and panning to one axis or the other.
*************************************************************************************/




PeasyCam cam;
ControlP5 cp5;

PFont font;


int startYear = 2006;
int endYear = 2023;

float radiusMultiplier = 100; // Multiplier for percentage-based radius
float minRadius = 100; // Minimum radius for points
float maxRadius = 300; // Maximum radius for points
float Radius = 200;
float radius;
PVector[] points;
int[] categoryColors;
int[] kind;


Table table;
int numRows, numColumns;

ArrayList<Category> categories = new ArrayList<Category>();
// Map<Integer, ArrayList<Category>> map = new HashMap<Integer,ArrayList<Category>>();

public void setup() {
  /* size commented out by preprocessor */;
  font = createFont("Arial", 100);
  cam = new PeasyCam(this, 750);
  // cam.setMinimumDistance(50);
  // cam.setMaximumDistance(800);
  cp5 = new ControlP5(this);
  
  categoryColors = new int[5];

  loadData();

  categoryColors[0] = color(255, 0, 0); // Red
  categoryColors[1] = color(0, 255, 0); // Green
  categoryColors[2] = color(0, 0, 255); // Blue
  categoryColors[3] = color(255, 255, 0); // Yellow
  categoryColors[4] = color(255, 0, 255); // Yellow

}

public void draw() {

  background(56, 48, 60);
  gui();

  noFill();
  stroke(0);
  int cur = 500;

  for(int i = 0; i < 1 ; i++){
    translate(cur+100, 0, 0);
    drawCircleAndText();
    //drawLabels();
    drawVertex(i);
  }
  //drawPoints();

  //if((mouseX<180) & (mouseY<180)) {
  //  cam.setActive(false);
  //} else {
  //  cam.setActive(true);
  //}

}

public void gui() {
   hint(DISABLE_DEPTH_TEST);
   cam.beginHUD();
   cp5.draw();
   cam.endHUD();
   hint(ENABLE_DEPTH_TEST);
}
// so that in the larger timeline, we can zoom in even further to a mini timeline which will contain all the books (the in date timeline)
class Category{
    String category;
    String date;
    float percentage;
    int year;
    int month;

    Category(int year, int month, String date, String category, float percentage){
        this.category = category;
        this.date = date;
        this.percentage = percentage;
        this.year = year;
        this.month = month;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public float getPercentage() {
        return percentage;
    }

    public void setPercentage(float percentage) {
        this.percentage = percentage;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public int getMonth() {
        return month;
    }

    public void setMonth(int month) {
        this.month = month;
    }

    


}
public void drawVertex(int category){
    PVector p;
    //int start = 0;
    for (int i = 0; i < 1; ++i) {
        for(int j = 0; j< 11; j++){
            //for (int category = 0; category < 5; category++) {
                beginShape();
                fill(0xFFFFFFFF, 50);
                p = points[(i*12+j)*5+category];
                vertex(p.x, p.y, p.z);
                p = points[(i*12+(j+1))*5+category];
                vertex(p.x, p.y, p.z);
                p = points[((i+1)*12+(j+1))*5+category];
                vertex(p.x, p.y, p.z);
                endShape();

                beginShape();
                fill(0xFFFFFFFF, 50);
                p = points[(i*12+j)*5+category];
                vertex(p.x, p.y, p.z);
                p = points[((i+1)*12+j)*5+category];
                vertex(p.x, p.y, p.z);
                p = points[((i+1)*12+(j+1))*5+category];
                vertex(p.x, p.y, p.z);
                endShape();
                
                Category c = categories.get((i*12+j)*5+category)
                System.out.println("i: "+c.year+c.month+c.category" j: "+j+" category: "+category);
        //}
        }
    }
  
   //for (int category = 0; category < 5; category++) {
        // for(int k = 0; k<11; k++){
        //   int i = 17*12+k*5+category;
        //   beginShape();
        //   fill(#FFFFFF, 50);
        //   p = points[i];
        //     vertex(p.x, p.y, p.z);
        //    p = points[i+5];
        //    vertex(p.x, p.y, p.z);
        //    p = points[0];
        //    vertex(p.x, p.y, p.z);
        //    endShape();

        //    beginShape();
        //    fill(#FFFFFF, 50);
        //    p = points[i];
        //    vertex(p.x, p.y, p.z);
        //    p = points[i+60];
        //    vertex(p.x, p.y, p.z);
        //    p = points[0];
        //    vertex(p.x, p.y, p.z);
        //    endShape();
    // }
//    }
}

 public void drawCircleAndText() {
    pushMatrix();
    //translate(0, 0, -50);
    //stroke(180);
    // strokeWeight(1);
    noFill();
    //rotateY(PI/2);
    stroke(180);
    strokeWeight(1);
    ellipse(0, 0, maxRadius, maxRadius);
    popMatrix();


    for (int i = 0; i < 12; i++) {
      //noFill();
      pushMatrix();
      float theta = (i+1)*PI*2/12;
      translate(Radius*cos(theta+PI/2), Radius*sin(theta+PI/2));
      rotate(theta+PI/2+PI);
      textAlign(LEFT, CENTER);
      fill(180);
      textSize(15);
      text(i+1, 1, 0);
      popMatrix();
    }
    //if (showTitle) {
    //  textAlign(RIGHT, CENTER);
    //  fill(180);
    //  textSize(20);
    //  text(movieTitle, 190, 0);
    //  //text(movieTitle, 190, 80);
    //}

    
    // Draw the second circle at a 90-degree angle from the first circle
    
    rotateY(PI/2);
    pushMatrix();
    //translate(50, 0, 0);
    noFill();
    stroke(180);
    strokeWeight(1);
    //stroke(180);
    // strokeWeight(1);
    //translate(0, 0, -50);
    ellipse(0, 0, maxRadius, maxRadius);
    popMatrix();
    
    for (int i = 2006; i < 2024; i++) {
        pushMatrix();
        float theta = (i)*TWO_PI/18;
        translate(Radius*cos(theta+PI/2), Radius*sin(theta+PI/2));
        rotate(theta+PI/2+PI);
        textAlign(RIGHT, CENTER);
        fill(180);
        textSize(15);
        text(i+" ", 0, 0);
        popMatrix();
    }
    
  
}

public void drawPoints() {
    for (int i = 0; i < categories.size(); i++) {
        PVector p = points[i];
        int category = kind[i];
        fill(categoryColors[category]);
        noStroke();
        pushMatrix();
        translate(p.x, p.y, p.z);
        sphere(1);
        popMatrix();
    }
}
 
//void keyPressed() {
//  //use arrow keys to select increasing/decreasing years
//  if (keyCode == 38) {
//    startSelect--;
//    if (startSelect < 0) {
//      startSelect = YEAR_COUNT -1;
//    }
//  } 
//  if (keyCode == 40) {
//    startSelect++;
//    if (startSelect >= YEAR_COUNT) {
//      startSelect = 0;
//    } 
//  }
  
//  //use +/- to increase scale of selected year
//  //need to use log scale so its apparent
//  //println("key: ", keyCode);
//  if (keyCode == 61 && heightMult < 8) {
//    //plus
//    heightMult = heightMult * 1.5;
//  }
//  if (keyCode == 45) {
//    //minus
//    if (heightMult >= 1.5) {
//      heightMult = heightMult /1.5;
//    } else {
//      heightMult = 1.0;
//    }
//  }
//}
public void loadData() {
   table = loadTable("categories_out.csv", "header");
   numRows = table.getRowCount();
   //println("Rows: " + numRows);
   kind = new int[numRows * 5];
   
   for(int i=0; i<numRows; i++){
     int year = table.getInt(i,0);
     int month = table.getInt(i,1);
     String date = table.getString(i,8);

     String category= "Anxiety";
     float percentage = table.getFloat(i,9);
     categories.add(new Category(year, month, date, category, percentage));
     kind[i * 5] = 0;

         // System.out.println(year+" "+month+" "+date+" "+category+" "+percentage);

     category= "Stress";
     percentage = table.getFloat(i,10);
     categories.add(new Category(year, month, date, category, percentage));
          kind[i * 5+1] = 1;

     // System.out.println(year+" "+month+" "+date+" "+category+" "+percentage);

     category= "Panic";
     percentage = table.getFloat(i,11);
     categories.add(new Category(year, month, date, category, percentage));
          kind[i * 5+2] = 2;

     // System.out.println(year+" "+month+" "+date+" "+category+" "+percentage);

     category= "Depression";
     percentage = table.getFloat(i,12);
     categories.add(new Category(year, month, date, category, percentage));
    kind[i * 5+3] = 3;

     // System.out.println(year+" "+month+" "+date+" "+category+" "+percentage);

     category= "Mental_Health";
     percentage = table.getFloat(i,13);
     categories.add(new Category(year, month, date, category, percentage));
      kind[i * 5+4] = 4;

     // System.out.println(year+" "+month+" "+date+" "+category+" "+percentage);
   }
   
   points = new PVector[categories.size()];
   
   System.out.print(categories.size()+ " "+numRows);

   for (int i = 0; i < categories.size(); i++) {
     int year = PApplet.parseInt(categories.get(i).year);
     int month = PApplet.parseInt(categories.get(i).month);
     float percentage = categories.get(i).percentage;
     String category = categories.get(i).category;

     //System.out.println(year+" "+month+" "+percentage+" "+category);

     float theta = map(year, 2006, 2024, 0, 2*PI);
     float phi = map(month, 1, 12, 0, 2*PI);
     float r = map(percentage, 0, 0.25f, minRadius, maxRadius);
     float x = r * sin(phi) * cos(theta);
     float y = r * sin(phi) * sin(theta);
     float z = r * cos(phi);

    // float x = r * cos(theta) * radiusMultiplier;
    // float y = map(month, 1, 12, -100, 100) * radiusMultiplier;
    // float z = map(percentage, 0, 0.2, -100, 100) * radiusMultiplier;

     //z = 

     points[i] = new PVector(x, y, z);
     // percentages[i] = percentage;
   }

//    radius = maxRadius;
 }
//void drawLabels(){
//   fill(255);
//   textSize(30);
//   pushMatrix();
//   textAlign(LEFT, TOP);
//   translate(-50, 50, 50);
//   scale(0.1);
//   text("2006", 0, 0, 0);
//   popMatrix();
  
//   pushMatrix();
//   textAlign(RIGHT, TOP);
//   translate(50, 50, 50);
//   scale(0.1);
//   text("2023", 0, 0, 0);
//   popMatrix();
  
//   pushMatrix();
//   textAlign(RIGHT, TOP);
//   translate(-50, -50, 50);
//   scale(0.1);
//   text("Dec", 0, 0, 0);
//   popMatrix();
  
//   pushMatrix();
//   textAlign(RIGHT, BOTTOM);
//   translate(-50, 50, 50);
//   scale(0.1);
//   text("Jan", 0, 0, 0);
//   popMatrix();
  
//   pushMatrix();
//   textAlign(LEFT, CENTER);
//   translate(50, 50, 50);
//   scale(0.1);
//   text("Percentage", 0, 0, 0);
//   popMatrix();
  
//   pushMatrix();
//   textAlign(LEFT, CENTER);
//   translate(50, 50, -50);
//   scale(0.1);
//   text("Perta", 0, 0, 0);
//   popMatrix();
// }







  // for(int i=0; i<categories.size(); i++){
    // float yearAxis = map(categories.get(i).year, 2006, 2023, -50, 50);
    // // float monthAxis = categories.get(i)+0.000;
    // float monthAxis = map(categories.get(i).month, 1, 12, -50, 50);
    // float percentageAxis = map(categories.get(i).percentage, 0, 1.1, -50, 50);
    // color c = elementDetermine(categories.get(i).category);

    // We only draw the points that are later than 2005-12-31
    // if (yearAxis > map(2006, 2006, 2023, -50, 50)){
    //     pushMatrix();
    //     translate(yearAxis, monthAxis, percentageAxis);
    //     strokeWeight(2);
    //     stroke(c);
    //     point(0,0,0);
    //     // compute the mouse distance with the point
    //     float mouseObjectDistance = sq(mouseX-screenX(0,0,0)) + sq(mouseY-screenY(0,0,0));
    //     // if the distance is smaller than a certain value
    //     if(mouseObjectDistance < 1000){
    //     // add a bigger point
    //     strokeWeight(10);
    //     point(0,0,0);
    //     fill(255,255,255);
    //     // add text label
    //     textMode(SHAPE);
    //     // if the distance is close, make the textsize smaller
    //     if(cam.getDistance()<100){
    //     textSize(3);}
    //     // if the distance is far, make the textsize bigger
    //     else{
    //         textSize(5);}
    //     String ca = " "+categories.get(i).percentage+"%"+categories.get(i).date;
    //     text(categories.get(i).category+ca,0,0);
    //     }
    //     popMatrix();
    // }
  // }

  // float z1, z2, z3, z4, x1, x2, y1, y2;

//   cColor = color(chinaHue, chinaSaturation, chinaBright, chinaTrans);
//   fill(cColor);

//   for (int i = beginDewey; i < endDewey; i++) {
    
//       beginShape(QUADS);
//       z1 = min(categories.get(i).percentage, Z)+zBase;
//       z2 = min(cVolume[j+1][i], Z)+zBase;
//       z3 = min(cVolume[j+1][i+1], Z)+zBase;
//       z4 = min(cVolume[j][i+1], Z)+zBase;

//       x1 = (i-beginDewey)*adjustX;
//       x2 = (i+1-beginDewey)*adjustX;
//       y1 = j*adjustY;
//       y2 = (j+1)*adjustY;
//       vertex(x1, y1, z1);
//       vertex(x1, y2, z2);
//       vertex(x2, y2, z3);
//       vertex(x2, y1, z4);
//       endShape();
    
//   }
  
  // drawLabels();  
    
  // fill(200, 20);
  // noStroke();
  // box(100);


  public void settings() { size(1000, 800, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "project2_jingpeng" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
